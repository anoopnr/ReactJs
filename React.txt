Day 1 24-04-2021
React pre requisites
Javascript- this keyword,filter,map and reduce
ES6- let and const,arrow functions,template literals,default parameters,object literals,rest and spread operators and destructing assignment
-----------------------------------------------------------------------------------------------------------------------
https://ui.dev/var-let-const/
var VS let VS const

var:
  function scoped
  undefined when accessing a variable before it's declared

let:
  block scoped
  ReferenceError when accessing a variable before it's declared

const:
  block scoped
  ReferenceError when accessing a variable before it's declared
  can't be reassigned
 -----------------------------------------------------------------------------------------------------------------------
The filter() method creates a new array with all elements that pass the test implemented by the provided function.

const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
const result = words.filter(word => word.length > 6);
console.log(result);// expected output: Array ["exuberant", "destruction", "present"]

The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.

const array1 = [1, 4, 9, 16];// pass a function to map
const map1 = array1.map(x => x * 2);
console.log(map1);// expected output: Array [2, 8, 18, 32]

The reduce() method executes a user-supplied “reducer” callback function on each element of the array, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.

const array1 = [1, 2, 3, 4];
const reducer = (previousValue, currentValue) => previousValue + currentValue;
console.log(array1.reduce(reducer));// 1 + 2 + 3 + 4
// expected output: 10
console.log(array1.reduce(reducer, 5));// 5 + 1 + 2 + 3 + 4
// expected output: 15
-----------------------------------------------------------------------------------------------------------------------

npx create-react-app hello-world
cd hello-world
npm start
-----------------------------------------------------------------------------------------------------------------------
Day 2 25-04-2021

https://www.youtube.com/watch?v=9VIiLJL0H4Y

React folder stucture

Index.html inside public folder
Div named root in index.html

index.js in src and how it loads app component inside the root element is the basic

Components
https://www.youtube.com/watch?v=Y2hgEGPzTZY
Components describe a part of UI
They are reusable and can be used inside other components

Component is placed in a Javascript filter
App component is inside app.js
We can also have compoennents with .jsx

Code inside a component Javascript file depends up on the type of component.
Two types of Components are there
Stateless functional component and stateful class component

Stateless functional components just return some html
Class components extends the component class from react library,
They must have a render method which will return some html

functional components
https://www.youtube.com/watch?v=Cla1WwguArA

Created a functional component named Greet, which returns a Hello Anoop header tag
Created an arrow function Greet
Exported the Greet arrow function with 'export default Greet'
Imported the Greet in app.js
used the <Greet/> tag inside app.js


Class Component
https://www.youtube.com/watch?v=lnV34uLEzis
creating a class component
Main difference between funcional component and class component
If possible we should only use functional components


Hooks
https://www.youtube.com/watch?v=oecI26cWqzk&list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&index=7


jsx
https://www.youtube.com/watch?v=7fPXI_MnBOY&list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&index=8
javascript XML
xml like tags

Props 
https://www.youtube.com/watch?v=m7OWXtbiXX8&list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&index=9
Properties
How to pass properties to components and make them dynamic
function components access props using props.attribute_name or props.children
class components access props using this.props.attribute_name

State
https://www.youtube.com/watch?v=4ORZ1GmjaMc&list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&index=10
state is managed within the component
can be changed inside component
useSatate Hooks -functional component
this.state -class component
state is difined inside class constructor after super() function call
using this.state={}
can be aceessed in jsx using {this.state.property_name}
state can be updated using this.setState({}) method

npm run build

npm serve -s build

setState
https://www.youtube.com/watch?v=uirRaVjRsf4&list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&index=11
